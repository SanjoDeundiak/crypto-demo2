#include <iostream>
#include <cassert>

#include "JiffyCryptoAnalysis.h"

static const std::string sequence = "\
000000110010111111110100100010110001011111000011001010011110100011100001110\
111010101111110101000101011100011110011000101110111100010001001011101111001\
011011011100111101001110110001010011101100000010011001010001100010010011110\
011110000001010000010010010110010001110011010101100011110110111111011000010\
110001110101001011100011011001011110000101001101011111110001001111000000101\
110100111101000000011010101110100000111011000100011010001001100000001011001\
01101110000101000010100011111001100000101111001110";

int main() {
    JiffyCryptoAnalysis cryptoAnalysis(sequence,
                                       0b100000000101, 0b11111111111,
                                       0b001000011011, 0b111111111,
                                       0b010000001001, 0b1111111111);

    auto generator = cryptoAnalysis.generator();

    for (int i = 0; i < sequence.size(); i++) {
        auto rand = generator.next();

        std::cout << (rand != 0 ? '1' : '0');

        if ((rand != 0 && sequence[i] == '0')
            || (rand == 0 && sequence[i] == '1'))
            assert(false);
    }

    return 0;
}